= Selenide = Concise API for Selenium WebDriver

== What is Selenide?
Selenide is a library for easier using of Selenium WebDriver for automated tests in Java.

 @Test
 public void testLogin() {
   open("/login");
   $(By.name("user.name")).type("johny");
   $("#submit").click();
   $("#username").shouldHave(text("Hello, Johny!"));
 }

Look here[https://github.com/codeborne/selenide/wiki/Selenide-vs-Selenium] for detailed comparision of Selenide and Selenium WebDriver API.

Probably two the most noticeable methods are (inspired from jQuery):
  $("#insuranceDetailsHeader") - returns WebElement matching given CSS selector
  $$("#insuranceDetailsHeader tr td") - returns list of WebElements matching given CSS selector

== How to start?
Just put selenide.jar to your project and import the following methods:

  import static com.codeborne.selenide.Selenide.*

Look for {Quick Start}[https://github.com/codeborne/selenide/wiki/Quick-Start] for details.

== What benefits gives Selenide over plain Selenium?

Selenium is not a testing library, it just allows you to manipulate browser.
Selenide provides a concise API for using Selenium WebDriver in UI tests:
* Transparent WebDriver
* Convenience methods
* Ajax support
* Screenshots

You can find more details below.

=== Transparent WebDriver
You don't need to operate with WebDriver directly.
Selenide for start and shut down the browser automatically whenevery it's needed.

=== Convenience methods
Selenide provides concise API for that makes your tests shorter and more readable. Selenide has convenient methods for operating controls like textfield, radiobutton and selectbox.

 @Test
 public void canFillComplexForm() {
   open("/client/registration");
   $(By.name("user.name")).type("johny");
   selectRadio("user.gender", "male");
   $("#user.preferredLayout").selectOption("plain");
   $("#user.securityQuestion").selectOptionByText("What is my first car?");
 }

=== Ajax support
When testing Ajax applications we often need to wait until some element changes its state. Selenide has built-in methods for waiting.

Any of the following methods waits until the described event happens. Default timeout is 4 seconds.
 $("#topic").should(appear);
 $("#topic").shouldBe(visible);

 $("#topic").should(disappear);
 $("h1").shouldHave(text("Hello"));
 $(".message").shouldNotHave(text("Wait for loading..."));
 $(".password").shouldNotHave(cssClass("errorField"));

etc.

Welcome to the Selenide Wiki[https://github.com/codeborne/selenide/wiki] for more details.

== Resources
* First of all, selenide.org[http://selenide.org]
* Presentation at TopConf conference[http://asolntsev.github.com/presentations/ui-tests/the_fast_and_the_continuous.topconf.html] (Tallinn, 1. Nov 2012)
* Article on Habrahabr.ru[http://habrahabr.ru/post/143269/] (in Russian)


== Changelog

Here is CHANGELOG[https://github.com/codeborne/selenide/blob/master/CHANGELOG]

---
== Authors
Selenide was created by Codeborne[http://codeborne.com/], an software development company based in Tallinn, Estonia.

The main committers are:
- Andrei Solntsev <mailto:andrei@codeborne.com>
- Anton Keks <mailto:anton@codeborne.com>
- Maksim SÃ¤kki <mailto:maksim@codeborne.com>
- Vadim Gerasimov <mailto:vadim@codeborne.com>


== License
MIT[http://choosealicense.com/licenses/mit/]

[![Build Status](https://travis-ci.org/codeborne/selenide.svg?branch=master)](https://travis-ci.org/codeborne/selenide)